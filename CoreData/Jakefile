/*
 * Jakefile
 * CoreData
 *
 * Created by Raphael Bartolome on February 5, 2010.
 * 
 * The MIT License
 * 
 * Copyright (c) 2009 Raphael Bartolome
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
var SYSTEM = require("system");
var OS = require("os");
var UTIL = require("narwhal/util");
var FILE = require("file");

global.$CONFIGURATION                   = SYSTEM.env['CONFIG'];
global.$BUILD_DIR                       = SYSTEM.env['BUILD_PATH'];
global.$BUILD_CONFIGURATION_DIR         = FILE.join($BUILD_DIR, $CONFIGURATION);

var ENV = require("system").env,
    FILE = require("file"),
    OS = require("os"),
    JAKE = require("jake"),
    task = JAKE.task,
    FileList = JAKE.FileList,
    task = require("jake").task,
    CLEAN = require("jake/clean").CLEAN,
    stream = require("narwhal/term").stream,
    framework = require("objective-j/jake").framework,
    configuration = ENV["CONFIG"] || ENV["CONFIGURATION"] || ENV["c"] || "Release";

framework ("CoreData", function(task)
{
    task.setBuildIntermediatesPath(FILE.join("Build", "CoreData.build", configuration));
    task.setBuildPath(FILE.join("Build", configuration));

    task.setProductName("CoreData");
    task.setIdentifier("com.rbartolome.CoreData");
    task.setVersion("0.1");
    task.setAuthor("Raphael Bartolome");
    task.setEmail("raphael.bartolome@gmail.com");
    task.setSummary("A CoreData implementation in Objective-J for Cappuccino");
    task.setSources(new FileList("**/*.j").exclude('Build/**/*', 'Tests/**/*', 'documentation/**/*'));
    task.setResources(new FileList("Resources/**/*"));
    task.setFlattensSources(true);
    task.setInfoPlistPath("Info.plist");

    if (configuration === "Debug")
        coreDataTask.setCompilerFlags("-DDEBUG -g");
    else
        coreDataTask.setCompilerFlags("-O");
});


task ("release", function()
{
    SYSTEM.env["CONFIG"] = "Release";
    spawnJake("CoreData");
});

task ("debug", function()
{
    SYSTEM.env["CONFIG"] = "Debug";
    spawnJake("CoreData");
});

task ("default", ["CoreData"]);

task ("build", ["default"]);

task ("debug", function()
{
    ENV["CONFIGURATION"] = "Debug";
    JAKE.subjake(["."], "build", ENV);
});

task ("release", function()
{
    ENV["CONFIGURATION"] = "Release";
    JAKE.subjake(["."], "build", ENV);
});


$BUILD_DIR = FILE.join("Build");
$BUILD_CJS_COREDATA = FILE.join($BUILD_DIR, "CommonJS");
$BUILD_COREDATA_DEBUG_FRAMEWORKS = FILE.join($BUILD_CJS_COREDATA, "Frameworks", "CoreData", "Debug");
$BUILD_COREDATA_RELEASE_FRAMEWORKS = FILE.join($BUILD_CJS_COREDATA, "Frameworks", "CoreData");

task ("package", ["release", "debug"], function()
{
    if (FILE.exists($BUILD_CJS_COREDATA))
        rm_rf($BUILD_CJS_COREDATA);
    FILE.mkdirs($BUILD_COREDATA_RELEASE_FRAMEWORKS);
    cp_r(FILE.join($BUILD_DIR, "Release", "CoreData"), $BUILD_COREDATA_RELEASE_FRAMEWORKS);
    FILE.mkdirs($BUILD_COREDATA_DEBUG_FRAMEWORKS);
    cp_r(FILE.join($BUILD_DIR, "Debug", "CoreData"), $BUILD_COREDATA_DEBUG_FRAMEWORKS);
    // copy package.json
    FILE.copy(FILE.join("package.json"), FILE.join($BUILD_CJS_COREDATA, "package.json"));
    // metadata for package.json
    setPackageMetadata(FILE.join($BUILD_CJS_COREDATA, "package.json"));
    stream.print("\0green(Package built at " + $BUILD_CJS_COREDATA + ".\0)");
});

task ("install", ["package", "release", "debug"], function()
{
    // install into narwhal
    if (OS.system(["tusk", "install", "--force", $BUILD_CJS_COREDATA]))
    {
        stream.print("\0red(Installation failed, possibly because you do not have permissions.\0)");
        stream.print("\0red(Try re-running using '\0yellow(jake sudo-install\0)'.\0)");
        OS.exit(1); //rake abort if ($? != 0)
    }
});


task ("docs", ["documentation"]);

task ("documentation", function()
{
    // try to find a doxygen executable in the PATH;
    var doxygen = executableExists("doxygen");

    // If the Doxygen application is installed on Mac OS X, use that
    if (!doxygen && executableExists("mdfind"))
    {
        var p = OS.popen(["mdfind", "kMDItemContentType == 'com.apple.application-bundle' && kMDItemCFBundleIdentifier == 'org.doxygen'"]);
        if (p.wait() === 0)
        {
            var doxygenApps = p.stdout.read().split("\n");
            if (doxygenApps[0])
                doxygen = FILE.join(doxygenApps[0], "Contents/Resources/doxygen");
        }
    }

    if (doxygen && FILE.exists(doxygen))
    {
        stream.print("\0green(Using " + doxygen + " for doxygen binary.\0)");

        var documentationDir = FILE.join("documentation");

        if (OS.system([FILE.join(documentationDir, "make_headers.sh")]))
            OS.exit(1); //rake abort if ($? != 0)

        if (!OS.system([doxygen, FILE.join(documentationDir, "CoreData.doxygen")]))
        {
            FILE.move("debug.txt", FILE.join("documentation", "debug.txt"));
        }

        OS.system(["ruby", FILE.join(documentationDir, "cleanup_headers")]);
    }
    else
        print("doxygen not installed. skipping documentation generation.");
});


task("test", function()
{
    var tests = new FileList('Tests/**/*Test.j'),
        cmd = ["ojtest"].concat(tests.items()),
        code = OS.system(cmd.map(OS.enquote).join(" "));
    if (code !== 0)
        OS.exit(code);
});


executableExists = function(/*String*/ executableName)
{
    var paths = ENV["PATH"].split(':');
    for (var i = 0; i < paths.length; i++) {
        var path = FILE.join(paths[i], executableName);
        if (FILE.exists(path))
            return path;
    }
    return null;
}

CLEAN.include(FILE.join("Build", "CoreData.build"));


global.getCoreDataVersion = function() {
    var versionFile = FILE.path(module.path).dirname().join("version.json");
    return JSON.parse(versionFile.read({ charset : "UTF-8" })).version;
}


setPackageMetadata = function(packagePath) {
    var pkg = JSON.parse(FILE.read(packagePath, { charset : "UTF-8" }));

    var p = OS.popen(["git", "rev-parse", "--verify", "HEAD"]);
    if (p.wait() === 0) {
        var sha = p.stdout.read().split("\n")[0];
        if (sha.length === 40)
            pkg["coredata-revision"] = sha;
    }

    pkg["coredata-timestamp"] = new Date().getTime();
    pkg["version"] = getCoreDataVersion();

    stream.print("    Version:   \0purple(" + pkg["version"] + "\0)");
    stream.print("    Revision:  \0purple(" + pkg["coredata-revision"] + "\0)");
    stream.print("    Timestamp: \0purple(" + pkg["coredata-timestamp"] + "\0)");

    FILE.write(packagePath, JSON.stringify(pkg, null, 4), { charset : "UTF-8" });
}


global.rm_rf = function(/*String*/ aFilename)
{
    try
    {
        FILE.rmtree(aFilename);
    } catch (anException)
    { }
}

global.cp_r = function(/*String*/ from, /*String*/ to)
{
    if (FILE.exists(to))
        rm_rf(to);

    if (FILE.isDirectory(from))
        FILE.copyTree(from, to);
    else
    {
        try
        {
            FILE.copy(from, to);
        } catch(e)
        {
            print(e + FILE.exists(from) + " " + FILE.exists(FILE.dirname(to)));
        }
    }
}

