/*
 * Jakefile
 * CoreData
 *
 * Created by Raphael Bartolome on February 5, 2010.
 * 
 * The MIT License
 * 
 * Copyright (c) 2009 Raphael Bartolome
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
var SYSTEM = require("system");
var OS = require("os");
var UTIL = require("narwhal/util");
var FILE = require("file");

global.$CONFIGURATION                   = SYSTEM.env['CONFIG'];
global.$BUILD_DIR                       = SYSTEM.env['BUILD_PATH'];
global.$BUILD_CONFIGURATION_DIR         = FILE.join($BUILD_DIR, $CONFIGURATION);

var ENV = require("system").env,
    task = require("jake").task,
    CLEAN = require("jake/clean").CLEAN,
    FileList = require("jake").FileList,
    framework = require("cappuccino/jake").framework,
    configuration = ENV["CONFIG"] || ENV["CONFIGURATION"] || ENV["c"] || "Debug";

var envInitial = Object.freeze(UTIL.copy(SYSTEM.env));

// logic to determine which packages should be loaded but are not.
// used in serializedENV()
function additionalPackages()
{
    var builtObjectiveJPackage = FILE.path($BUILD_CONFIGURATION_DIR).join("CommonJS", "objective-j", "");
    var builtCappuccinoPackage = FILE.path($BUILD_CONFIGURATION_DIR).join("CommonJS", "cappuccino", "");
    
    var packages = [];
    
    // load built objective-j if exists, otherwise unbuilt
    if (builtObjectiveJPackage.join("package.json").exists()) {
        if (!packageInCatalog(builtObjectiveJPackage))
            packages.push(builtObjectiveJPackage);
    }
    
    // load built cappuccino if it exists
    if (builtCappuccinoPackage.join("package.json").exists()) {
        if (!packageInCatalog(builtCappuccinoPackage))
            packages.push(builtCappuccinoPackage);
    }
    
    return packages;
}

// checks to see if a path is in the package catalog
function packageInCatalog(path)
{
    var catalog = require("narwhal/packages").catalog;
    for (var name in catalog)
        if (String(catalog[name].directory) === String(path))
            return true;
    return false;
}

serializedENV = function()
{
    var envNew = {};
    
    // add changed keys to the new ENV
    Object.keys(SYSTEM.env).forEach(function(key) {
        if (SYSTEM.env[key] !== envInitial[key])
            envNew[key] = SYSTEM.env[key];
    });

    // pseudo-HACK: add NARWHALOPT with packages we should ensure are loaded
    var packages = additionalPackages();
    if (packages.length) {
        envNew["NARWHALOPT"] = packages.map(function(p) { return "-p " + OS.enquote(p); }).join(" ");
        envNew["PATH"] = packages.map(function(p) { return FILE.join(p, "bin"); }).concat(SYSTEM.env["PATH"]).join(":");
    }

    return Object.keys(envNew).map(function(key) {
        return key + "=" + OS.enquote(envNew[key]);
    }).join(" ");
}

function spawnJake(/*String*/ aTaskName)
{
    if (OS.system(serializedENV() + " " + SYSTEM.args[0] + " " + aTaskName))
        OS.exit(1);//rake abort if ($? != 0)
}

coreDataTask = framework ("CoreData", function(coreDataTask)
{   
    coreDataTask.setBuildIntermediatesPath(FILE.join("Build", "CoreData.build", configuration));
    coreDataTask.setBuildPath(FILE.join("Build", configuration));

    coreDataTask.setProductName("CoreData");
    coreDataTask.setIdentifier("com.rbartolome.CoreDatat");
    coreDataTask.setVersion("0.1");
    coreDataTask.setAuthor("Raphael Bartolome");
    coreDataTask.setEmail("raphael.bartolome@gmail.com");
    coreDataTask.setSummary("A CoreData implementation in Objective-J for Cappuccino");
    coreDataTask.setSources(new FileList("**/*.j").exclude('Build/**/*'));
    coreDataTask.setResources(new FileList("Resources/**/*"));
    coreDataTask.setFlattensSources(true);
    coreDataTask.setInfoPlistPath("Info.plist");

    if (configuration === "Debug")
        coreDataTask.setCompilerFlags("-DDEBUG -g");
    else
        coreDataTask.setCompilerFlags("-O");
});


task ("release", function()
{
    SYSTEM.env["CONFIG"] = "Release";
    spawnJake("CoreData");
});

task ("debug", function()
{
    SYSTEM.env["CONFIG"] = "Debug";
    spawnJake("CoreData");
});

CLEAN.include(FILE.join("Build", "CoreData.build"));

task ("default", ["CoreData", "clean"]);
